{"version":3,"sources":["Pad.js","getApi.js","ResultPad.js","Results.js","WaitingRoom.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Pad","props","pad","owner","holder","pages","task","id","useState","guess","setGuess","guessDrawn","setGuessDrawn","thickness","setThickness","waitingForOthers","setWaitingForOthers","canvasRef","useRef","guessCanvasRef","useEffect","current","loadSaveData","length","drawing","title","position","style","marginBottom","name","taskDescription","ref","hideGrid","className","brushRadius","display","flexDirection","alignItems","width","fontWeight","min","max","value","onChange","onAfterChange","justifyContent","margin","onClick","undo","clear","disabled","marginTop","e","target","data","getSaveData","fetch","roomCode","method","body","JSON","stringify","headers","alignSelf","ResultPad","onBackClicked","page","setPage","showWord","setShowWord","ownerName","height","fontSize","border","borderRadius","Results","pads","selectedPad","setSelectedPad","resultPad","useMemo","map","key","role","href","window","location","reload","WaitingRoom","players","showStartGameButton","onStartGameClicked","a","status","player","Welcome","setRoomCode","onNameChange","onCreateRoomClick","response","json","parsedResponse","joined","onRoomJoined","onJoinRoomClick","placeholder","event","App","gameState","setGameState","isLeader","setIsLeader","storedName","localStorage","getItem","result","characters","charactersLength","i","charAt","Math","floor","random","getName","setName","setPad","resultPads","setResultPads","setPlayers","isRoomMessage","messageRoomCode","socket","io","transports","on","payload","close","content","React","setItem","bottom","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2ff5ab1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport Slider from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport getApi from \"./getApi\";\r\n\r\nexport default function Pad(props) {\r\n  const { owner, holder, pages, task, id } = props.pad;\r\n\r\n  const [guess, setGuess] = useState(\"\");\r\n  const [guessDrawn, setGuessDrawn] = useState(false);\r\n  const [thickness, setThickness] = useState(2);\r\n  const [waitingForOthers, setWaitingForOthers] = useState(\"\");\r\n  const canvasRef = useRef();\r\n  const guessCanvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setWaitingForOthers(false);\r\n    setGuessDrawn(false);\r\n  }, [props.pad]);\r\n\r\n  useEffect(() => {\r\n    if (props.pad.task === \"guess\" && !guessDrawn) {\r\n      if (guessCanvasRef.current) {\r\n        guessCanvasRef.current.loadSaveData(\r\n          props.pad.pages[props.pad.pages.length - 1].drawing,\r\n          false\r\n        );\r\n\r\n        setGuessDrawn(true);\r\n      }\r\n    }\r\n  });\r\n\r\n  const onSubmitClicked = () => {\r\n    setWaitingForOthers(true);\r\n\r\n    let data;\r\n    if (task === \"draw\") {\r\n      data = { drawing: canvasRef.current.getSaveData() };\r\n    } else {\r\n      data = { guess: guess };\r\n    }\r\n\r\n    fetch(\r\n      `${getApi()}room/submit/${props.roomCode}/playerName/${\r\n        props.name\r\n      }/padId/${id}`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n      }\r\n    );\r\n  };\r\n\r\n  const title =\r\n    owner.position === holder ? (\r\n      <p style={{ marginBottom: \"0\" }}>you have your own pad</p>\r\n    ) : (\r\n      <p style={{ marginBottom: \"0\" }}>\r\n        you have <strong>{owner.name}</strong>'s pad\r\n      </p>\r\n    );\r\n\r\n  const taskDescription =\r\n    task === \"draw\" ? (\r\n      <>\r\n        <p>\r\n          draw your best <strong>{pages[pages.length - 1]}</strong>\r\n        </p>\r\n        <CanvasDraw\r\n          ref={canvasRef}\r\n          hideGrid={true}\r\n          className={\"canvasStyle\"}\r\n          brushRadius={thickness}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"start\",\r\n            width: \"100%\"\r\n          }}\r\n        >\r\n          <p style={{ fontWeight: \"bold\", marginBottom: \"0\" }}>thickness:</p>\r\n          <Slider\r\n            className={\"thicknessSlider\"}\r\n            min={1}\r\n            max={12}\r\n            value={thickness}\r\n            onChange={value => {\r\n              setThickness(value);\r\n            }}\r\n            onAfterChange={value => {\r\n              setThickness(value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-evenly\",\r\n            margin: \"12px 0\",\r\n            width: \"100%\"\r\n          }}\r\n        >\r\n          <button\r\n            onClick={() => {\r\n              canvasRef.current.undo();\r\n            }}\r\n          >\r\n            ✏ undo\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              canvasRef.current.clear();\r\n            }}\r\n          >\r\n            💣 clear\r\n          </button>\r\n        </div>\r\n      </>\r\n    ) : (\r\n      <>\r\n        <p>what do you think this drawing is?</p>\r\n        <CanvasDraw\r\n          ref={guessCanvasRef}\r\n          hideGrid={true}\r\n          className={\"canvasStyle\"}\r\n          disabled={true}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"start\",\r\n            width: \"100%\"\r\n          }}\r\n        >\r\n          <p\r\n            style={{ fontWeight: \"bold\", marginBottom: \"0\", marginTop: \"6px\" }}\r\n          >\r\n            guess:\r\n          </p>\r\n          <input\r\n            style={{ marginTop: \"12px\", marginBottom: \"12px\", width: \"100%\" }}\r\n            value={guess}\r\n            onChange={e => {\r\n              setGuess(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n\r\n  return waitingForOthers ? (\r\n    <p>waiting for others to finish...</p>\r\n  ) : (\r\n    <>\r\n      {title}\r\n      {taskDescription}\r\n      <button\r\n        onClick={onSubmitClicked}\r\n        style={{\r\n          margin: \"12px 0\",\r\n          alignSelf: \"center\"\r\n        }}\r\n      >\r\n        🤞 submit\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","export default function getApi() {\r\n  const isTesting = false;\r\n  return isTesting\r\n    ? \"http://localhost:3000/\"\r\n    : \"https://guess-a-sketch-service.azurewebsites.net/\";\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\n\r\nexport default function ResultPad(props) {\r\n  const { pad, onBackClicked } = props;\r\n  const { owner, pages } = pad;\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [showWord, setShowWord] = useState(false);\r\n\r\n  const canvasRef = useRef();\r\n\r\n  const ownerName = <strong>{owner.name}</strong>;\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      canvasRef.current.loadSaveData(pages[page].drawing);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button onClick={onBackClicked}>◀ back</button>\r\n      <p style={{ marginTop: \"12px\" }}>{ownerName}'s pad</p>\r\n      {page % 2 !== 0 ? (\r\n        <CanvasDraw\r\n          ref={canvasRef}\r\n          hideGrid={true}\r\n          className={\"canvasStyle\"}\r\n          disabled={true}\r\n        />\r\n      ) : (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"500px\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontSize: \"40px\",\r\n            width: \"350px\",\r\n            border: \"1px black solid\",\r\n            borderRadius: \"4px\"\r\n          }}\r\n        >\r\n          <p>{pages[page]}</p>\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-evenly\",\r\n          width: \"100%\",\r\n          marginTop: \"24px\",\r\n          marginBottom: \"14px\"\r\n        }}\r\n      >\r\n        <button\r\n          disabled={page === 1}\r\n          onClick={() => {\r\n            setPage(page - 1);\r\n          }}\r\n        >\r\n          ⏪ previous page\r\n        </button>\r\n        <p style={{ margin: 0 }}>\r\n          page <strong>{page}</strong>\r\n        </p>\r\n        {page === pages.length - 1 ? (\r\n          <button onClick={() => setShowWord(true)}>\r\n            🎩 reveal {ownerName}'s word\r\n          </button>\r\n        ) : (\r\n          <button onClick={() => setPage(page + 1)}>⏩ next page</button>\r\n        )}\r\n      </div>\r\n      {showWord && <strong style={{ marginBottom: \"12px\" }}>{pages[0]}</strong>}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useMemo } from \"react\";\r\nimport ResultPad from \"./ResultPad\";\r\n\r\nexport default function Results(props) {\r\n  const { pads } = props;\r\n\r\n  const [selectedPad, setSelectedPad] = useState();\r\n\r\n  const resultPad = useMemo(() => {\r\n    if (selectedPad) {\r\n      for (const pad of pads) {\r\n        if (pad.owner.name === selectedPad) {\r\n          return pad;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }, [pads, selectedPad]);\r\n\r\n  const content = resultPad ? (\r\n    <ResultPad pad={resultPad} onBackClicked={() => setSelectedPad(null)} />\r\n  ) : (\r\n    <>\r\n      <h2>game over</h2>\r\n      <h3>results</h3>\r\n      <ul>\r\n        {pads.map(pad => (\r\n          <li key={pad.owner.name}>\r\n            <a\r\n              role=\"button\"\r\n              href=\"#\"\r\n              onClick={() => {\r\n                setSelectedPad(pad.owner.name);\r\n              }}\r\n            >\r\n              {pad.owner.name}'s pad\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button\r\n        style={{ marginTop: \"28px\" }}\r\n        onClick={() => {\r\n          window.location.reload();\r\n        }}\r\n      >\r\n        🏃‍♂️ leave room\r\n      </button>\r\n    </>\r\n  );\r\n\r\n  return content;\r\n}\r\n","import getApi from \"./getApi\";\r\nimport React from \"react\";\r\n\r\nexport default function WaitingRoom(props) {\r\n  const { players, showStartGameButton, roomCode } = props;\r\n\r\n  const onStartGameClicked = async () => {\r\n    const response = await fetch(`${getApi()}room/start/${roomCode}`, {\r\n      method: \"POST\"\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      // todo: error handling\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ alignSelf: \"center\" }}>\r\n      <p style={{ margin: \"24px 0\" }}>\r\n        you're in room <strong>{roomCode}</strong>\r\n      </p>\r\n      {players.length > 0 ? (\r\n        <p style={{ margin: \"24px 0\" }}>who's in the house?</p>\r\n      ) : (\r\n        <p style={{ margin: \"24px 0\" }}>waiting for people to join...</p>\r\n      )}\r\n      <ul style={{ margin: \"24px 0\" }}>\r\n        {players.map(player => (\r\n          <li key={player.name}>{player.name}</li>\r\n        ))}\r\n      </ul>\r\n      {showStartGameButton && (\r\n        <button onClick={onStartGameClicked}>🔫 start game</button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport getApi from \"./getApi\";\r\n\r\nexport default function Welcome(props) {\r\n  const [roomCode, setRoomCode] = useState(\"\");\r\n  const { name, onNameChange } = props;\r\n\r\n  const onCreateRoomClick = async () => {\r\n    const response = await fetch(`${getApi()}room/create/playerName/${name}/`, {\r\n      method: \"POST\"\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      const parsedResponse = await response.json();\r\n\r\n      if (parsedResponse.joined) {\r\n        props.onRoomJoined(parsedResponse.roomCode, [], true /* isLeader */);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onJoinRoomClick = async () => {\r\n    const response = await fetch(\r\n      `${getApi()}room/join/${roomCode}/playerName/${name}/`,\r\n      {\r\n        method: \"POST\"\r\n      }\r\n    );\r\n\r\n    if (response.status === 200) {\r\n      const parsedResponse = await response.json();\r\n\r\n      if (parsedResponse.joined) {\r\n        props.onRoomJoined(\r\n          parsedResponse.roomCode,\r\n          parsedResponse.players,\r\n          false /* isLeader */\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Welcome\">\r\n      <div\r\n        style={{\r\n          marginBottom: \"12px\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}\r\n      >\r\n        <strong>your name</strong>\r\n        <input\r\n          placeholder=\"joe\"\r\n          value={name}\r\n          onChange={event => onNameChange(event.target.value)}\r\n          style={{ marginTop: \"6px\", marginBottom: \"6px\" }}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          marginBottom: \"12px\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}\r\n      >\r\n        <strong style={{ marginTop: \"6px\", marginBottom: \"6px\" }}>\r\n          create a new room\r\n        </strong>\r\n        <button\r\n          onClick={onCreateRoomClick}\r\n          disabled={!name}\r\n          style={{\r\n            marginBottom: \"12px\"\r\n          }}\r\n        >\r\n          🏠 new room\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          marginBottom: \"12px\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\"\r\n        }}\r\n      >\r\n        <strong>join a room</strong>\r\n        <input\r\n          placeholder=\"i.e. 0825\"\r\n          value={roomCode}\r\n          onChange={event => setRoomCode(event.target.value)}\r\n          style={{ marginTop: \"6px\", marginBottom: \"6px\" }}\r\n        />\r\n        <button onClick={onJoinRoomClick} disabled={!roomCode}>\r\n          🧑 join room\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport Pad from \"./Pad\";\nimport React, { useState, useEffect } from \"react\";\nimport Results from \"./Results\";\nimport WaitingRoom from \"./WaitingRoom\";\nimport Welcome from \"./Welcome\";\nimport getApi from \"./getApi\";\n\nfunction App() {\n  const [gameState, setGameState] = useState(\"pre\"); // pre, in, post\n  const [isLeader, setIsLeader] = useState(false);\n  const [name, setName] = useState(getName());\n  const [pad, setPad] = useState(null);\n  const [resultPads, setResultPads] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [roomCode, setRoomCode] = useState(0);\n\n  useEffect(() => {\n    const isRoomMessage = messageRoomCode => {\n      // eslint-disable-next-line\n      return messageRoomCode == roomCode;\n    };\n\n    const socket = io(getApi(), {\n      transports: [\"websocket\"]\n    });\n\n    socket.on(\"newPlayer\", payload => {\n      if (isRoomMessage(payload.roomCode)) {\n        setPlayers(payload.players);\n      }\n    });\n\n    socket.on(\"nextRound\", async payload => {\n      if (isRoomMessage(payload.roomCode)) {\n        const response = await fetch(\n          `${getApi()}room/nextRound/${roomCode}/playerName/${name}/`,\n          {\n            method: \"POST\"\n          }\n        );\n\n        if (response.status === 200) {\n          const parsedResponse = await response.json();\n          setPad(parsedResponse.pad);\n          setGameState(\"in\");\n        }\n      }\n    });\n\n    socket.on(\"gameOver\", async payload => {\n      if (isRoomMessage(payload.roomCode)) {\n        const response = await fetch(`${getApi()}room/gameOver/${roomCode}`, {\n          method: \"POST\"\n        });\n\n        if (response.status === 200) {\n          const parsedResponse = await response.json();\n          setResultPads(parsedResponse.pads);\n          setGameState(\"post\");\n        }\n      }\n    });\n\n    return () => socket.close();\n  }, [roomCode, name]);\n\n  const onRoomJoined = (roomCode, players, isLeader) => {\n    setRoomCode(roomCode);\n    setPlayers(players);\n    setIsLeader(isLeader);\n  };\n\n  const content = React.useMemo(() => {\n    switch (gameState) {\n      case \"pre\":\n        return roomCode ? (\n          <WaitingRoom\n            players={players}\n            showStartGameButton={isLeader}\n            roomCode={roomCode}\n          />\n        ) : (\n          <Welcome\n            name={name}\n            onRoomJoined={onRoomJoined}\n            onNameChange={name => {\n              setName(name);\n              window.localStorage.setItem(\"name\", name);\n            }}\n          />\n        );\n      case \"in\":\n        return <Pad pad={pad} roomCode={roomCode} name={name} />;\n      case \"post\":\n        return <Results pads={resultPads} />;\n      default:\n        return <>🤷‍♀️</>;\n    }\n  }, [gameState, players, isLeader, roomCode, name, pad]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        {content}\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: 0,\n            marginBottom: \"12px\",\n            fontSize: \"24px\",\n            marginTop: \"12px\"\n          }}\n        >\n          guess-a-sketch\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getName() {\n  const isTesting = false;\n  const storedName = window.localStorage.getItem(\"name\");\n  if (storedName && !isTesting) {\n    return storedName;\n  }\n\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < 5; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}